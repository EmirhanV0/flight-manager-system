# =============================================================================
# UYS Reference Manager Service - Production Docker Compose
# =============================================================================

services:
  reference-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: uys-reference-manager-prod
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_URL=jdbc:mysql://mysql-prod:3306/uys_reference?useSSL=true&requireSSL=true
      - DB_USERNAME=${DB_USERNAME:-uys_user}
      - DB_PASSWORD=${DB_PASSWORD:-uys_password}
      - REDIS_HOST=${REDIS_HOST:-redis-prod}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka-prod:9092}
      - JVM_OPTS=-Xms1g -Xmx2g -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - BUILD_TIME=${BUILD_TIME}
      - GIT_COMMIT=${GIT_COMMIT}
    volumes:
      - ./logs:/app/logs
      - /etc/ssl/certs:/etc/ssl/certs:ro
    networks:
      - uys-prod-network
    depends_on:
      mysql-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
      kafka-prod:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/logs:size=1g

  # Production MySQL
  mysql-prod:
    image: mysql:8.0
    container_name: uys-mysql-prod
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-secure_root_password}
      - MYSQL_DATABASE=uys_reference
      - MYSQL_USER=${DB_USERNAME:-uys_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-uys_password}
      - MYSQL_INITDB_SKIP_TZINFO=1
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./infra/mysql/init:/docker-entrypoint-initdb.d:ro
      - ./infra/mysql/conf/prod.cnf:/etc/mysql/conf.d/prod.cnf:ro
    networks:
      - uys-prod-network
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --innodb-buffer-pool-size=1G
      - --innodb-log-file-size=256M
      - --max-connections=200
      - --query-cache-size=64M
      - --slow-query-log=1
      - --slow-query-log-file=/var/log/mysql/slow.log
      - --long-query-time=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Production Redis
  redis-prod:
    image: redis:7-alpine
    container_name: uys-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-secure_redis_password}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_prod_data:/data
    networks:
      - uys-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Production Kafka (simple single node for demo)
  kafka-prod:
    image: confluentinc/cp-kafka:7.4.0
    container_name: uys-kafka-prod
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-prod:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-prod:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_COMPRESSION_TYPE: snappy
    volumes:
      - kafka_prod_data:/var/lib/kafka/data
    networks:
      - uys-prod-network
    depends_on:
      - zookeeper-prod
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Production Zookeeper
  zookeeper-prod:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: uys-zookeeper-prod
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_prod_data:/var/lib/zookeeper/data
      - zookeeper_prod_logs:/var/lib/zookeeper/log
    networks:
      - uys-prod-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  kafka_prod_data:
    driver: local
  zookeeper_prod_data:
    driver: local
  zookeeper_prod_logs:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  uys-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16